#!/bin/sh
# This script was automatically generated by ACR v0.6.0
# @author: pancake <pancake@phreaker.net>
# @url: http://news.nopcode.org/pancake/acr.html

do_remove() {
if [ "${ACR_RMFILES}" ]; then
  printf "cleaning temporally files... "
  rm -f ${ACR_RMFILES}
  echo "done"
fi
}
control_c() {
  printf "\n\n^C control-c : script execution interrupted.\n"
  do_remove
  exit 1
}
trap control_c 2
READLINE=1
USBSNF=1
DEBUGGER=1
JAVA=0
WII=0
W32=0
SYSPROXY=0
VALA=1
GUI=1
split_host() {
S="$"
while : ; do
ENVWORDS="${ENVWORDS} $1_CPU $1_OS"
STR=`eval "echo ${S}$1"`
SPLIT_CPU="`echo "$STR" | cut -d - -f 1`"
SPLIT_OS="`echo "$STR" | cut -d - -f 3`"
eval "$1_CPU=\"$SPLIT_CPU\""
eval "$1_OS=\"$SPLIT_OS\""
shift
[ -z "$1" ] && break
done
}

VPATH=`dirname ${0}`
if [ "${VPATH}" = "." ]; then 
	WODIS=current
else
	if [ "${VPATH}" = "${PWD}" ]; then
		VPATH=.
		WODIS=current
	else
		WODIS=crosspath
		CURDIR=$PWD
		cd $VPATH
		VPATH="${PWD}/"
		cd $CURDIR
	fi
fi

guess_os() {
if [ -e "${VPATH}/config.guess" ]; then
	sh ${VPATH}/config.guess
	return
fi
CPU="`uname -m|sed -e 's, ,,g'`"
OS="`uname -s|awk '{print(tolower($0))}'`"
GNU="`uname --help 2>&1 | grep gnu`"
[ "${GNU}" ] && OS="${OS}-gnu"
[ "${CPU}" = ppc ] && CPU="powerpc"
echo "${CPU}-unknown-${OS}"
}

SEARCHPATH="/usr /usr/local /usr/pkg /sw"

: ${PREFIX:=/usr/local}
CROSSBUILD=0
BUILD=`guess_os`
HOST="${BUILD}"
TARGET="${HOST}"
SYSCONFDIR=""

create_environ() {
: ${EPREFIX:=${PREFIX}}
: ${SPREFIX:=${PREFIX}}
: ${BINDIR:=${SPREFIX}/bin}
: ${SBINDIR:=${PREFIX}/sbin}
: ${SYSCONFDIR:=${SPREFIX}/etc}
: ${LIBDIR:=${SPREFIX}/lib}
: ${LIBEXECDIR:=${SPREFIX}/libexec}
: ${DATADIR:=${SPREFIX}/share}
: ${INCLUDEDIR:=${SPREFIX}/include}
: ${INFODIR:=${SPREFIX}/info}
: ${MANDIR:=${SPREFIX}/man}
: ${LOCALSTATEDIR:=${SPREFIX}/var}
: ${INSTALL:=/usr/bin/install}
: ${INSTALL_DIR:=${INSTALL} -d}
: ${INSTALL_DATA:=${INSTALL} -m 644}
: ${INSTALL_SCRIPT:=${INSTALL}}
: ${INSTALL_PROGRAM:=${INSTALL} -s}
: ${INSTALL_MAN:=${INSTALL} -m 444}
: ${INSTALL_LIB:=${INSTALL} -c}
 PKGNAME='radare' ; VERSION='0.9.4' ; CONTACT_MAIL="pancake@youterm.com" ; CONTACT_NAME="pancake" ; CONTACT="pancake <pancake@youterm.com>" ;
}
                
show_usage() {
cat <<EOF2
'configure' configures radare-0.9.4 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
  -V, --version           display version information and exit
  -r, --report            show what libs/programs require to work

Installation directories:
  --prefix=PREFIX        install arch-independent files in PREFIX [/usr/local]
  --exec-prefix=EPREFIX  install arch-dependent files in EPREFIX [PREFIX]
  --sandbox=SPREFIX      sandbox prefix directory: SPREFIX [PREFIX]

Fine tuning of the installation directories:
  --bindir=DIR           user executables [EPREFIX/bin]
  --sbindir=DIR          system admin executables [EPREFIX/sbin]
  --libexecdir=DIR       program executables [EPREFIX/libexec]
  --datadir=DIR          read-only architecture-independent data [PREFIX/share]
  --sysconfdir=DIR       read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR   modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR    modifiable single-machine data [PREFIX/var]
  --libdir=DIR           object code libraries [EPREFIX/lib]
  --includedir=DIR       C header files [PREFIX/include]
  --infodir=DIR          info documentation [PREFIX/info]
  --mandir=DIR           man documentation [PREFIX/man]

System types:
  --build=BUILD          configure for building on BUILD [guessed]
  --host=HOST            cross-compile to build programs to run on HOST [BUILD]
  --target=TARGET        configure for building compilers for TARGET [HOST]
EOF2

printf "\nOptional Features:
  --without-readline     disables the readline support 
  --without-usb-sniffer  disables the build of the libusb sniffer 
  --without-debugger     disables the debugger layer 
  --with-java            builds the java api 
  --with-wii             builds the wii plugin for usbgecko 
  --enable-w32           enables the build of w32 version of the framework (mingw32) 
  --with-sysproxy        builds the syscall proxy plugin 
  --without-vala         disables the build of all the vala-dependant parts 
  --without-gui          radare without the gtk frontend \n"
printf "\nSome influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  CPPFLAGS    C/C++ preprocessor flags, e.g. -I<include dir> if you have
              headers in a nonstandard directory <include dir>
  CPP         C preprocessor\n"
printf "\nReport bugs to: pancake <pancake@youterm.com>"
echo ""
exit 0
}

take_environ() {
: ${SH:=/bin/sh}
: ${CPP:=cpp}
: ${CC:=gcc}
: ${PREFIX:=/usr/local/}
}

show_version() {
echo "radare-0.9.4 configuration script.
The 'Free Software Foundation' message is only for autodetection.
Originally written by pancake <pancake@phreaker.net>."
exit 0
}

parse_options() {
flag=`echo $1| cut -d = -f 1`
value=`echo $1| awk 'BEGIN{FS="=";}{print $2}'`
flag2=`echo $flag|cut -f2- -d -| sed -e 's,-,_,g' -e 's,^_,,g'|tr '[a-z]' '[A-Z]'`

case $flag in
"-h"|"--help"|"--hel"|"--h"|"--he"|"-help")
	show_usage ; ;;
"-V"|"-version"|"--version")
	show_version ; ;;
"-r"|"--r"|"--report")
echo "PKGNAME:   radare"
echo "VERSION:   0.9.4"
echo "LANGS:     c"
echo "REQUIRED:  libdl lib>=vala-1.0 libvala-1.0>=0.1.6"
echo "OPTIONAL:  libewf"
echo "PKG-CONFIG:  gtk+-2.0 vte"
echo "FLAGS:     --without-readline --without-usb-sniffer --without-debugger --with-java --with-wii --enable-w32 --with-sysproxy --without-vala --without-gui"
	exit 0
	;;
"--cache-file") 
	# ignored: acr have no cache
	;;
"--build")
	BUILD="$value"; ;;
"--host")
	CROSSBUILD=1
	HOST="$value"; ;;
"--target")
	TARGET="$value"; ;;
"--prefix")
	PREFIX="$value"; ;;
"--exec-prefix")
	EPREFIX="$value"; ;;
"--sandbox"|"--sprefix")
	SPREFIX="$value"; ;;
"--bindir")
	BINDIR="$value"; ;;
"--sbindir")
	SBINDIR="$value"; ;;
"--libexecdir")
	LIBEXECDIR="$value"; ;;
"--datadir")
	DATADIR="$value"; ;;
"--sysconfdir")
	SYSCONFDIR="$value"; ;;
"--sharedstatedir")
	SHAREDSTATEDIR="$value"; ;;
"--localstatedir")
	LOCALSTATEDIR="$value"; ;;
"--libdir")
	LIBDIR="$value"; ;;
"--includedir")
	INCLUDEDIR="$value"; ;;
"--infodir")
	INFODIR="$value"; ;;
"--mandir")
	MANDIR="$value"; ;;

"--without-readline") READLINE="0"; ;;
"--without-usb-sniffer") USBSNF="0"; ;;
"--without-debugger") DEBUGGER="0"; ;;
"--with-java") JAVA="1"; ;;
"--with-wii") WII="1"; ;;
"--enable-w32") W32="1"; ;;
"--with-sysproxy") SYSPROXY="1"; ;;
"--without-vala") VALA="0"; ;;
"--without-gui") GUI="0"; ;;
*) if [ "$value" ]; then eval "`echo $flag2=$value`" ; 
else echo ; echo "WARNING: Unknown flag '$flag'." >&2 ; echo ; fi ;;
esac
}

# MAIN #
take_environ

while : ; do
[ -z "$1" ] && break
parse_options $1
shift
done

ENVWORDS="MANDIR INFODIR LIBDIR INCLUDEDIR LOCALSTATEDIR SYSCONFDIR DATADIR LIBEXECDIR SBINDIR BINDIR EPREFIX PREFIX SPREFIX TARGET HOST BUILD INSTALL INSTALL_LIB INSTALL_MAN INSTALL_PROGRAM INSTALL_DIR INSTALL_SCRIPT INSTALL_DATA HOST_OS HOST_CPU BUILD_OS BUILD_CPU TARGET_OS TARGET_CPU PKGNAME VPATH VERSION CONTACT CONTACT_NAME CONTACT_MAIL CC CFLAGS LDFLAGS HAVE_LANG_C LIL_ENDIAN BIG_ENDIAN BYTEORDER HAVE_LIB_DL DL_LIBS SOLARIS DARWIN SHARED_EXT SHARED_CFLAGS WINDOWS READLINE HAVE_RL_COMPLETION_MATCHES RADARE_LDFLAGS HAVE_LIB_READLINE HAVE_USB_H USBSNF DEBUGGER JAVA WII W32 SYSPROXY VALA HAVE_VALAC VALAC HAVE_VALA_1_0_VERSION_0_1_6 WITH_VALA _CFLAGS SIZEOF_OFF_T HAVE_LIB_EWF GUI HAVE_GTKDIALOG GTKDIALOG GTK_FLAGS GTK_LIBS HAVE_PKGCFG_GTK_2_0 VTE_FLAGS VTE_LIBS HAVE_PKGCFG_VTE HAVE_VALA"

create_environ

echo "checking build system type... ${BUILD}"
echo "checking host system type... ${HOST}"
echo "checking target system type... ${TARGET}"
[ "${CROSSBUILD}" = 1 ] && echo "using crosscompilation mode."

split_host BUILD HOST TARGET
echo "checking for working directories... ${WODIS}"
echo "using prefix '${PREFIX}'"
ACR_RMFILES=" test.c a.out a.exe"










: 
COMPILER=CC
printf "checking for c compiler... "
HAVE_LANG_C=1
if [ "${CROSSBUILD}" = 1 ]; then
 (command -v ${HOST}-${CC} >/dev/null 2>&1)
 if [ $? = 0 ]; then CC="${HOST}-${CC}"; fi
fi
echo "main(){}" > test.c
 (exec ${CC} ${CFLAGS} ${LDFLAGS} test.c >/dev/null 2>&1)
if [ $? = 0 ]; then echo ${CC}; else
 echo no ; HAVE_LANG_C=0
do_remove
echo "ERROR: ${CC} cannot create executables" >&2 ;
exit 1 ; fi
printf "checking host endianness... "
echo 'main(){int a=1;char *b=(char*)&a;printf("%d",b[0]);}' > test.c
${CC} ${CFLAGS} ${LDFLAGS} -o a.out test.c >/dev/null 2>&1
if [ ! $? = 0 ]; then
	echo unexpected error
	do_remove
	exit 1
fi
LIL_ENDIAN=$(./a.out)
if [ ${LIL_ENDIAN} = 1 ]; then
	BYTEORDER=1234
	BIG_ENDIAN=0
	echo little
else
	BYTEORDER=4321
	BIG_ENDIAN=1
	LIL_ENDIAN=0
	echo big
fi

printf "checking for dynamic library... "
HAVE_LIB_DL=0
for OS in linux syllable sunos darwin beos solaris ; do
if [ "${HOST_OS}" = "${OS}" ]; then
	HAVE_LIB_DL=1
	break;
fi
done
if [ "${HAVE_LIB_DL}" = 1 ]; then
	DL_LIBS="-ldl"
	echo "required"
else
	DL_LIBS=""
	echo "libc"
fi
export SOLARIS="0"
export DARWIN="0"
if [ "$HOST_OS" = "sunos" ]; then
export SOLARIS="1"; fi
if [ "$HOST_OS" = "solaris" ]; then
export SOLARIS="1"; fi
if [ "$HOST_OS" = "darwin" ]; then
export DARWIN="1"
export SHARED_EXT="dylib"
export SHARED_CFLAGS="-dynamiclib"
else
export SHARED_EXT="so"
export SHARED_CFLAGS="-fPIC -shared"; fi
if [ "$HOST_OS" = "mingw" ]; then
export WINDOWS="1"; fi
if [ "$WINDOWS" = "1" ]; then
export SHARED_EXT="dll"; fi
printf "checking function rl_completion_matches() in readline... "
echo "main(){ rl_completion_matches(0); }" > test.c
${CC} ${CFLAGS} ${LDFLAGS} -lreadline test.c >/dev/null 2>&1
if [ $? = 0 ]; then
	echo yes ; HAVE_RL_COMPLETION_MATCHES=1
else
	HAVE_RL_COMPLETION_MATCHES=0 ; echo no ; fi
export RADARE_LDFLAGS=""
export HAVE_LIB_READLINE="0"
if [ "$HAVE_RL_COMPLETION_MATCHES" = "1" ]; then
export HAVE_LIB_READLINE="1"
export RADARE_LDFLAGS="-lreadline"; fi
if [ "$READLINE" = "0" ]; then
export HAVE_LIB_READLINE="0"; fi
check_include() {
VAR=$1
INC=$2
_REQUIRED=$3
printf "checking for $2... "
echo > test.c
echo "#include <${INC}>" >>test.c
echo "main(){}" >>test.c
eval \$${COMPILER} ${CFLAGS} test.c >/dev/null 2>&1
if [ $? = 0 ]; then
	eval ${VAR}=1
	echo yes
else
	eval ${VAR}=0
	echo no ; fi }
check_include HAVE_USB_H usb.h 0

if [ "$HAVE_USB_H" = "0" ]; then
export USBSNF="0"; fi
printf "checking for valac... "
if [ -x "${VALAC}" ]; then
FIND=${VALAC}
else
FIND=""
for A in `echo ${PATH} | sed -e 's,:, ,g'`; do
if [ -x "${A}/valac" ]; then
        FIND="${A}/valac"
        break;
fi
done
fi
if [ -n "${FIND}" ]; then 
 echo ${FIND}; 
 HAVE_VALAC=1
 VALAC=${FIND}
else
 HAVE_VALAC=0
 VALAC=valac
 echo no ; fi
HAVE_VALA_1_0_VERSION_0_1_6=0
printf "checking version of library vala-1.0 >= 0.1.6... "
pkg-config --atleast-version=0.1.6 vala-1.0 >/dev/null 2>&1
if [ $? = 0 ]; then HAVE_VALA_1_0_VERSION_0_1_6=1 ; echo ok; else
echo "no" ; fi
if [ "$HAVE_VALA_1_0_VERSION_0_1_6" = "0" ]; then
echo "   Needs vala 0.1.6 at least" >&2 
export VALAC=""; fi
if [ "$VALAC" = "valac" ]; then
export WITH_VALA="0"
export VALA="0"
echo "   No valac found" >&2 ; fi
export _CFLAGS="$CFLAGS"
export CFLAGS="${CFLAGS} -include /usr/include/sys/types.h -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64"
export SIZEOF_OFF_T="1"
printf 'checking size of off_t... '
echo 'main(){printf("%d",sizeof(off_t));}' >test.c
${CC} ${CFLAGS} -o a.out test.c >/dev/null 2>&1
if [ 0 = $? ]; then 
 SIZEOF_OFF_T=$(./a.out)
 echo ${SIZEOF_OFF_T}
 HAVE_SIZEOF_OFF_T=1
else
	SIZEOF_OFF_T=0 ; echo error

HAVE_SIZEOF_OFF_T=0

fi

export CFLAGS="$_CFLAGS"
check_library() {
VAR=$1
S="$"
_REQUIRED=$3
_CHKLIB_NAME=$2
_CHKLIB_LIBS="`echo ${_CHKLIB_NAME} | awk -F + '{ for(i=1;i<=NF;i++) { str=str "-l" $i " " } print str; }'`"
printf "checking for lib${_CHKLIB_NAME} ... "
echo "main(){ }" > test.c
eval ${S}${COMPILER} ${CFLAGS} ${LDFLAGS} ${_CHKLIB_LIBS} test.c >/dev/null 2>&1
if [ $? = 0 ]; then
	eval ${VAR}=1
	echo yes
else
	eval ${VAR}=0
	echo no  ; fi }
check_library HAVE_LIB_EWF ewf 0

printf "checking for gtkdialog... "
if [ -x "${GTKDIALOG}" ]; then
FIND=${GTKDIALOG}
else
FIND=""
for A in `echo ${PATH} | sed -e 's,:, ,g'`; do
if [ -x "${A}/gtkdialog" ]; then
        FIND="${A}/gtkdialog"
        break;
fi
done
fi
if [ -n "${FIND}" ]; then 
 echo ${FIND}; 
 HAVE_GTKDIALOG=1
 GTKDIALOG=${FIND}
else
 HAVE_GTKDIALOG=0
 GTKDIALOG=gtkdialog
 echo no ; fi
if [ "$GTKDIALOG" = "gtkdialog" ]; then
echo "   You will need gtkdialog for the gui" >&2 ; fi
printf 'checking pkg-config flags for gtk+-2.0... '
tmp=`pkg-config --cflags gtk+-2.0 2>/dev/null`
if [ $? = 1 ]; then echo no ; HAVE_PKGCFG_GTK_2_0=0; else 
GTK_FLAGS=$tmp; 
tmp=`pkg-config --libs gtk+-2.0 2>/dev/null`
if [ ! $? = 1 ]; then 
echo yes; HAVE_PKGCFG_GTK_2_0=1; 
GTK_LIBS=$tmp; fi; fi
if [ "$GTK_FLAGS" = "" ]; then
export GUI="0"; fi
printf 'checking pkg-config flags for vte... '
tmp=`pkg-config --cflags vte 2>/dev/null`
if [ $? = 1 ]; then echo no ; HAVE_PKGCFG_VTE=0; else 
VTE_FLAGS=$tmp; 
tmp=`pkg-config --libs vte 2>/dev/null`
if [ ! $? = 1 ]; then 
echo yes; HAVE_PKGCFG_VTE=1; 
VTE_LIBS=$tmp; fi; fi
if [ "$VTE_FLAGS" = "" ]; then
export GUI="0"; fi
if [ "$GUI" = "0" ]; then
export VALAC="0"
export HAVE_VALA="0"
echo "   Vala build disabled, no gtk-dev found" >&2 ; fi
SEDFLAGS=""
for A in ${ENVWORDS} ; do
	[ "${A}" = VPATH ] && continue
	[ "${A}" = srcdir ] && continue 
	eval "VAR=\$${A}"
	VAR="`echo ${VAR} | sed -e 's/\,/\\\,/g'`"
	SEDFLAGS="${SEDFLAGS} -e 's,@${A}@,${VAR},g;'"
done
for A in . ./config.mk src src/rsc src/rfile  ; do # SUBDIRS
 if [ -f "${VPATH}/${A}.acr" ]; then
  SD_TARGET=${A}
 else
  if [ -d "${VPATH}/${A}" ]; then
   SD_TARGET=${A}/Makefile
   mkdir -p ${A}
  else
   echo "ERROR: Cannot find ${VPATH}/${A}.acr" >&2
   exit 1
  fi
 fi
 echo "creating ${SD_TARGET}"
mkdir -p $(echo ${A} | sed -e "s,/`basename ${A}`$,,g")
 cat ${VPATH}/${SD_TARGET}.acr | \
eval sed -e "s,@VPATH@,${VPATH}/${A},g" ${SEDFLAGS} > ${SD_TARGET}.tmp

for A in ${ENVWORDS}; do
VALUE=`eval echo "$"${A}`
if [ "$VALUE" = "0" ]; then ## FALSE
 MARK="##${A}##"
 mv ${SD_TARGET}.tmp ${SD_TARGET}.tmp2
 cat ${SD_TARGET}.tmp2 | MARK=$MARK awk 'BEGIN{a=0;}{if($1==ENVIRON["MARK"]){ if(a)a=0;else a=1 }else{if(!a)print;}}' > ${SD_TARGET}.tmp
 fi
done
 mv ${SD_TARGET}.tmp ${SD_TARGET} && rm -f ${SD_TARGET}.tmp2
 if [ $? = 1 ]; then echo Cannot write target file ; control_c ; fi
done

do_remove
echo
echo "Final report:"
for A in  GUI WII VALA JAVA USBSNF SYSPROXY DEBUGGER HAVE_LIB_EWF HAVE_LIB_READLINE ; do # REPORT
eval VAL="\$${A}"
[ -z "${VAL}" ] && VAL="(null)"
echo " - ${A} = ${VAL}"
done
