<!--
 * GTK UI for changing a reg in radare
 * license: GPLv2+
 * (c) 2009 Sebastian Reichel <sre@ring0.de>
-->
<Dialog xmlns:g="http://gtkaml.org/0.2" xmlns="Gtk" xmlns:glib="GLib"
	g:name="SetRegister" title="Set Register" has-separator="false"
	border-width="5" default-width="300" default-height="80"
	response="{on_response}" destroy="{Gtk.main_quit}">

	<VBox spacing="10" g:existing="vbox" g:standalone="true">
		<!-- TODO: use a table -->
		<HBox homogeneous="false" spacing="10" expand="false">
			<Label with-mnemonic="true" label="Register:" mnemonic-widget="{cbe}" expand="false"/>
			<ComboBoxEntry g:private="cbe" changed="on_combobox_changed()" text="true"/>
		</HBox>
		<HBox homogeneous="false" spacing="10" expand="false">
			<Label with-mnemonic="true" label="Value:" mnemonic-widget="{regvalue}" expand="false"/>
			<Entry g:private="regvalue"/>
		</HBox>
	</VBox>

<![CDATA[
	string regname;
	HashTable<string, string> regs;

	public SetRegister() {
		add_button(STOCK_CANCEL, ResponseType.CANCEL);
		add_button(STOCK_OK, ResponseType.OK);
	}

	private void init_regs() {
		regs = new HashTable<string, string> (str_hash, str_equal);
		try {
			var file = File.new_for_path("/tmp/.regs");
			var in_stream = new DataInputStream(file.read (null));
			string line;
			while ((line = in_stream.read_line (null, null)) != null) {
				var arr = Regex.split_simple(" @ ", line.substring(2,-1));
				if (arr.length<2)
					break;
				regs.insert(arr[0], arr[1]);
			}
		} catch(Error e) {
			stderr.printf("Error: %s\n", e.message);
			stderr.printf("File: '/tmp/.regs'!\n");
		}
	}

	private void fill_comboboxentry() {
		var list = new GLib.List<string> ();

		foreach(string reg in regs.get_keys())
			list.append(reg);

		list.sort(GLib.strcmp);

		for(int i=0; i<list.length(); i++)
			cbe.append_text(list.nth_data(i));
	}

	private void on_combobox_changed() {
		this.regname = this.cbe.get_active_text();

		if(regname.length > 2 && get_reg_value() != null)
			regvalue.set_text(get_reg_value());
	}


	private string get_reg_value() {
		return regs.lookup(regname);
	}

	private void on_response(Dialog source, int response_id) {
		switch (response_id) {
			case ResponseType.CANCEL:
				destroy();
				break;
			case ResponseType.OK:
				ok_clicked();
				destroy();
				break;
		}
	}

	private void ok_clicked() {
		stdout.printf(":!reg %s=%s\n", regname, this.regvalue.text);
	}

	static int main (string[] args) {
		Gtk.init(ref args);
		var dialog = new SetRegister();
		dialog.show_all();
		dialog.init_regs();
		dialog.fill_comboboxentry();
		Gtk.main();
		return 0;
	}
]]>
</Dialog>
