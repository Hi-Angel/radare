/* This vapi has been manually generated by me */
[CCode (cheader_filename="r_hash.h", cprefix="r_hash", lower_case_cprefix="r_hash_")]
namespace Radare.Hash {

	[CCode (cprefix="R_HASH_")]
	public enum Algorithm {
		ALL = 0,
		MD5 = 0,
		SHA1 = 2,
		SHA256 = 4,
		SHA384 = 8,
		SHA512 = 16,
	}

	[CCode (cname="int")]
	public enum Size {
		MD4 = 16,
		MD5 = 16,
		SHA1 = 16,
		SHA256 = 32,
		SHA384 = 64,
		SHA512 = 64,
	}

	/* checksum */
	public uint16 crc16(uint16 crc, uint8 *buf, uint64 len);
	public uint32 crc32(uint8 *buf, uint64 len);
	public uint16 xor(uint8 *buf, uint64 len);
	public uint32 xorpair(uint8 *buf, uint64 len);
	public uint8  parity(uint8 *buf, uint64 len);
	public uint8  mod255(uint8 *buf, uint64 len);

	/* analitics */
	public uint8 hamdist(uint8 *buf, uint64 len);
	public double entropy(uint8 *buf, uint64 len);
	public int pcprint(uint8 *buf, uint64 len);

	[Compact]
	[CCode (cname="struct r_hash_t", free_function="r_hash_state_free")]
	public class State {
		//[CCode (cname="r_hash_new")]
		public State(bool init);
		public void init(Algorithm bits);
		public uint8 *md4(uint8 *input, uint32 len);
		public uint8 *md5(uint8 *input, uint32 len);
		public uint8 *sha1(uint8 *input, uint32 len);
		public uint8 *sha256(uint8 *input, uint32 len);
		public uint8 *sha384(uint8 *input, uint32 len);
		public uint8 *sha512(uint8 *input, uint32 len);
	}
}
