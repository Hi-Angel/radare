<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>USB Gecko API Information</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="center"> 
  <table width="95%" border="0">
    <tr>
      <td><p align="center"><font size="4" face="Verdana, Arial, Helvetica, sans-serif">USB 
          Gecko API Information (Console)</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif">USB 
          Gecko uses a custom hardware protocol which is controlled by EXI (External 
          Interface) commands being sent to the memory card port in either the 
          Gamecube or Wii console. As the memory card slot is available on both 
          Gamecube and Wii it allows a high speed serial connection between both 
          the console and the PC</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif">All 
          USB functions can be found in file usb.c, all flash functions can be 
          found in flash.c</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif"><strong><font size="4">USB 
          EXI Functions:</font></strong></font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif"><strong>USB 
          Check Gecko<br>
          </strong>unsigned int usb_checkgecko();</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif">This 
          function checks to see if the USB Gecko is connected and will return 
          1 if it is connected, or return 0 if no ideas found. It is recommended 
          to use at the start of programs before using the USB Flush function. 
          </font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif"><strong>USB 
          Flush<br>
          </strong>void usb_flush();</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif">This 
          function will flush any remaining data from the FIFO buffer in the USB 
          chip, it is recommend to use at the start of all programs after the 
          USB Check Gecko function to avoid any unwanted data.</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif"><strong>USB 
          Send Byte<br>
          </strong>unsigned int usb_sendbyte (unsigned char sendbyte);</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif">This 
          function sends a byte to the PC via the exi bus, if the byte was sent 
          the function returns 1, else will return 0.</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif"><strong>USB 
          Receive Byte<br>
          </strong>unsigned int usb_receivebyte (unsigned char* receivebyte);</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif">This 
          function receives a byte from the PC via the exi bus, if the byte was 
          received it will return 1, else will return 0.</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif"><strong>USB 
          Send Buffer<br>
          </strong>void usb_sendbuffer (void *buffer, unsigned int size);</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif">This 
          simple function sends data held in a buffer to the PC, pointer to the 
          buffer and size of buffer is required. Checking the FIFO isnt required 
          when sending buffers to PC.</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif"><strong>USB 
          Receive Buffer</strong><br>
          void usb_receivebuffer (void *buffer, unsigned int size);</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif">This 
          function receives data from the PC to pointed buffer, it also performs 
          an extra check status call so the FIFO on the USB chip doesn't overflow 
          without any overhead. This allows developers to make routines without 
          having to make extra checks or checksums for packet loss ect.</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif"><strong>USB 
          Check Send Status<br>
          </strong>unsigned int usb_checksendstatus();</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif">This 
          function checks to see if the FIFO is ok to send a byte to the PC, it 
          isn't really needed.</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif"><strong>USB 
          Check Receive Status<br>
          </strong>unsigned int usb_checkreceivestatus(); </font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif">This 
          functions checks to see if it is ok to receive data from the PC and 
          that buffer is not full, it is required in most cases to avoid packet 
          loss and dropping, this saves having to retry packets and other things 
          associated with USB, the USB Receive buffer fuctions calls this function 
          to be safe when receiving data.</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif"><strong><font size="4">USB 
          Flash Functions:</font></strong></font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif"><strong>Flash 
          Chip Erase</strong><br>
          void flash_chiperase();</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif">This 
          function will erase the chip. This needs to be called before programming.</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif"><strong>Flash 
          Program Byte<br>
          </strong>void flash_programbyte(unsigned long flashaddress, unsigned 
          char flashdata);</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif">This 
          function allows you to program a byte at the flash address given.</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif"><strong>Flash 
          Verify<br>
          </strong>int flash_verify();</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif">This 
          function will verify the chip, by checking the manufacture and device 
          ID's. It is not required but could be useful.</font></p>
        <p align="left"><font face="Verdana, Arial, Helvetica, sans-serif"><strong>Note: 
          The flash used in the USB Gecko is SST 39VF040. Datasheet can be found 
          on the website www.usbgecko.com</strong></font></p>
  </td>
    </tr>
  </table>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  </div>
</body>
</html>
